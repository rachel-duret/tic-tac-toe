{"version":3,"sources":["Components/Square.js","Patterns.js","App.js","index.js"],"names":["Square","val","chooseAquare","className","onClick","Patterns","App","useState","board","setBoard","player","setPlayer","winner","state","result","setResult","useEffect","checIfTie","checkWin","alert","restartGame","square","map","index","forEach","currPattern","firstPlayer","foundWinningPattern","filled","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iLAWeA,MARf,YAAsC,IAArBC,EAAoB,EAApBA,IAAKC,EAAe,EAAfA,aAClB,OACI,qBAAKC,UAAU,SAASC,QAASF,EAAjC,SACKD,KCNAI,EAAW,CACpB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IC2FIC,MA7Ff,WACE,MAA0BC,mBAAS,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,KAA5D,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA4BF,mBAAS,QAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA4BJ,mBAAS,CAACK,OAAO,OAAQC,MAAM,SAA3D,mBAAOC,EAAP,KAAeC,EAAf,KAEAC,qBAAU,WACRC,IACAC,IAGEP,EADS,QAARD,EACS,aAEA,UAEX,CAACF,IAEJQ,qBAAU,WACU,QAAfF,EAAOD,QACRM,MAAM,kCAAD,OAAmCL,EAAOF,SAC/CQ,OAED,CAACN,IAEJ,IAAMZ,EAAe,SAACmB,GACpBZ,EACED,EAAMc,KAAI,SAACrB,EAAKsB,GAChB,OAAGA,GAASF,GAAiB,IAAPpB,EACbS,EAEFT,OAILiB,EAAU,WACdb,EAASmB,SAAQ,SAACC,GAChB,IAAMC,EAAclB,EAAMiB,EAAY,IACtC,GAAiB,IAAbC,EAAJ,CACA,IAAIC,GAAsB,EAC1BF,EAAYD,SAAQ,SAACD,GAChBf,EAAMe,IAAUG,IACjBC,GAAsB,MAGvBA,GACDZ,EAAU,CAACH,OAAQF,EAAQG,MAAO,kBAKlCI,EAAU,WACd,IAAIW,GAAS,EACbpB,EAAMgB,SAAQ,SAACH,GACD,IAATA,IACDO,GAAS,MAIVA,GACDb,EAAU,CAAEH,OAAQ,qBAAmBC,MAAO,SAI5CO,EAAa,WACjBX,EAAS,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,KAClCE,EAAU,eAKZ,OACE,qBAAKR,UAAU,MAAf,SACE,sBAAKA,UAAU,QAAf,UACE,sBAAKA,UAAU,MAAf,UACE,cAAC,EAAD,CAAQF,IAAKO,EAAM,GAAIN,aAAc,WAAKA,EAAa,MACvD,cAAC,EAAD,CAAQD,IAAKO,EAAM,GAAIN,aAAc,WAAKA,EAAa,MACvD,cAAC,EAAD,CAAQD,IAAKO,EAAM,GAAIN,aAAc,WAAKA,EAAa,SAEzD,sBAAKC,UAAU,MAAf,UACA,cAAC,EAAD,CAAQF,IAAKO,EAAM,GAAIN,aAAc,WAAKA,EAAa,MACrD,cAAC,EAAD,CAAQD,IAAKO,EAAM,GAAIN,aAAc,WAAKA,EAAa,MACvD,cAAC,EAAD,CAAQD,IAAKO,EAAM,GAAIN,aAAc,WAAKA,EAAa,SAEzD,sBAAKC,UAAU,MAAf,UACA,cAAC,EAAD,CAAQF,IAAKO,EAAM,GAAIN,aAAc,WAAKA,EAAa,MACrD,cAAC,EAAD,CAAQD,IAAKO,EAAM,GAAIN,aAAc,WAAKA,EAAa,MACvD,cAAC,EAAD,CAAQD,IAAKO,EAAM,GAAIN,aAAc,WAAKA,EAAa,eCtFjE2B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.e21e0d6a.chunk.js","sourcesContent":["import React from 'react'\r\nimport '../App.css'\r\n\r\nfunction Square({val, chooseAquare}) {\r\n    return (\r\n        <div className=\"square\" onClick={chooseAquare}>\r\n            {val}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Square\r\n","export const Patterns = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n];","\nimport './App.css';\nimport{ useState , useEffect} from 'react'\nimport Square from './Components/Square';\nimport {Patterns} from './Patterns';\n\nfunction App() {\n  const [board, setBoard] = useState([\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",]);\n  const [player, setPlayer] = useState(\"LARA\");\n  const [result, setResult] = useState({winner:\"none\", state:\"none\"});\n\n  useEffect(()=>{\n    checIfTie();\n    checkWin();\n\n    if(player==\"LARA\"){\n      setPlayer(\"PAPA MAMAN\");\n    } else{\n      setPlayer(\"LARA\");\n    }\n  }, [board]);\n\n  useEffect(()=>{\n    if(result.state !=\"none\"){\n      alert(`Game finished! Winning player: ${result.winner}`);\n      restartGame();\n    }  \n  }, [result]);\n\n  const chooseAquare = (square) =>{\n    setBoard(\n      board.map((val, index)=>{\n      if(index == square && val == \"\"){\n        return player\n      }\n      return val\n    })\n    );\n  };\n  const checkWin =()=>{\n    Patterns.forEach((currPattern)=>{\n      const firstPlayer = board[currPattern[0]];\n      if (firstPlayer==\"\") return;\n      let foundWinningPattern = true;\n      currPattern.forEach((index)=>{\n        if(board[index] != firstPlayer){\n          foundWinningPattern = false;\n        }\n      });\n      if(foundWinningPattern){\n        setResult({winner: player, state: \"GAGNÉ\"})\n      }\n    });\n  };\n\n  const checIfTie=()=>{\n    let filled = true;\n    board.forEach((square)=>{\n      if(square ==\"\"){\n        filled = false;\n      }\n    });\n    \n    if(filled){\n      setResult({ winner: \"PERSONNEL GAGNÉ\", state: \"Tie\" });\n    }\n  };\n\n  const restartGame =()=>{\n    setBoard([\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",]);\n    setPlayer(\"PAPA MAMAN\");\n  };\n\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"board\">\n        <div className=\"row\">\n          <Square val={board[0]} chooseAquare={()=>{chooseAquare(0)}}/>\n          <Square val={board[1]} chooseAquare={()=>{chooseAquare(1)}}/>\n          <Square val={board[2]} chooseAquare={()=>{chooseAquare(2)}}/>\n        </div>\n        <div className=\"row\">\n        <Square val={board[3]} chooseAquare={()=>{chooseAquare(3)}}/>\n          <Square val={board[4]} chooseAquare={()=>{chooseAquare(4)}}/>\n          <Square val={board[5]} chooseAquare={()=>{chooseAquare(5)}}/>\n        </div>\n        <div className=\"row\">\n        <Square val={board[6]} chooseAquare={()=>{chooseAquare(6)}}/>\n          <Square val={board[7]} chooseAquare={()=>{chooseAquare(7)}}/>\n          <Square val={board[8]} chooseAquare={()=>{chooseAquare(8)}}/>\n        </div>\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}